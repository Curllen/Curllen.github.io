<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Curllen`Blog</title>
    <link>http://curllen.uicp.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>一枚程序员的博客</description>
    <pubDate>Wed, 31 Oct 2018 07:06:10 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>mybatis系列(三):抽取SQL片段-优化SQL</title>
      <link>http://curllen.uicp.io/2018/10/31/mybatis%E6%8A%BD%E5%8F%96SQL%E7%89%87%E6%AE%B5/</link>
      <guid>http://curllen.uicp.io/2018/10/31/mybatis%E6%8A%BD%E5%8F%96SQL%E7%89%87%E6%AE%B5/</guid>
      <pubDate>Wed, 31 Oct 2018 07:02:00 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;如果某些sql片段在多个sql语句中被复用,可以将这些sql片段抽取为一个单独的映射文件(例如SQL语句中*,都尽可能用具体的字段名代替,以提高执行效率,这个过程中会出现大量重复sql片段).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;抽
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>如果某些sql片段在多个sql语句中被复用,可以将这些sql片段抽取为一个单独的映射文件(例如SQL语句中*,都尽可能用具体的字段名代替,以提高执行效率,这个过程中会出现大量重复sql片段).</p></blockquote><h2 id="抽取片段"><a href="#抽取片段" class="headerlink" title="抽取片段"></a>抽取片段</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 为何要抽取以下片段,去除SQL语句中的*,可以提高执行效率 --&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">  PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">  &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;!-- namespace(命名空间)：映射文件的唯一标识 --&gt;</span><br><span class="line">&lt;mapper namespace=&quot;CommonSQL&quot;&gt;</span><br><span class="line">    &lt;!-- 通过sql标签&gt;id唯一标识片段 --&gt;</span><br><span class="line">&lt;sql id=&quot;commonSql&quot;&gt;</span><br><span class="line">id,user_name,</span><br><span class="line">password,</span><br><span class="line">name,</span><br><span class="line">age,</span><br><span class="line">sex,</span><br><span class="line">birthday,</span><br><span class="line">created,</span><br><span class="line">updated</span><br><span class="line">&lt;/sql&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h2 id="引用片段"><a href="#引用片段" class="headerlink" title="引用片段"></a>引用片段</h2><ul><li>mybatis-config.xml</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper resource=&quot;CommonSQL.xml&quot;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure><ul><li>需要使用片段的映射文件:在需要使用该sql片段的地方通过include标签的refid属性引用该sql片段：<include refid="”名称空间.sql片段的id”"></include></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- &lt;sql id=&quot;commonSql&quot;&gt;</span><br><span class="line">id,user_name,</span><br><span class="line">password,</span><br><span class="line">name,</span><br><span class="line">age,</span><br><span class="line">sex,</span><br><span class="line">birthday,</span><br><span class="line">created,</span><br><span class="line">updated</span><br><span class="line">&lt;/sql&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;queryUsersLikeUserName&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">select &lt;include refid=&quot;CommonSQL.commonSql&quot;&gt;&lt;/include&gt; from tb_user where user_name like &apos;%&apos; #&#123;userName&#125; &apos;%&apos;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://curllen.uicp.io/2018/10/31/mybatis%E6%8A%BD%E5%8F%96SQL%E7%89%87%E6%AE%B5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>mybatis系列(二):mybatis动态SQL</title>
      <link>http://curllen.uicp.io/2018/10/31/mybatis%E5%8A%A8%E6%80%81SQL/</link>
      <guid>http://curllen.uicp.io/2018/10/31/mybatis%E5%8A%A8%E6%80%81SQL/</guid>
      <pubDate>Wed, 31 Oct 2018 06:57:42 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;位于映射文件中,提供OGNL表达式动态生成SQL的功能.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;动态SQL&quot;&gt;&lt;a href=&quot;#动态SQL&quot; class=&quot;headerlink&quot; title=&quot;动态SQL&quot;&gt;&lt;/a&gt;动态SQL&lt;/h
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>位于映射文件中,提供OGNL表达式动态生成SQL的功能.</p></blockquote><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><ul><li>if<blockquote><p>判断语句, 例如判断是否输入用户名来拼接语句</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;queryUserListLikeUserName&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">select * from tb_user where sex=1</span><br><span class="line">&lt;!-- if:判断</span><br><span class="line">test：OGNL表达式</span><br><span class="line">userName:接口文件中通过@param设定的参数名(下同)</span><br><span class="line">trim:字符串处理方法,去掉字符串起始和结尾的空格(JQuery也有相同方法)</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;if test=&quot;userName!=null and userName.trim()!=&apos;&apos;&quot;&gt;</span><br><span class="line"> and user_name like &apos;%&apos; #&#123;userName&#125; &apos;%&apos;</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><ul><li>choose&gt;when,otherwise(&gt;,表示标签级别,&gt;前面是父标签)<blockquote><p>条件选择,例如是否输入用户名/年龄来拼接语句(选其一,只选择第一个符合条件(或都不符合情况下的otherwise)的语句进行拼接)</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;queryUserListLikeUserNameOrAge&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">select * from tb_user where sex=1 </span><br><span class="line">&lt;!-- choose:条件选择</span><br><span class="line">when：test-判断条件，一旦有一个when成立，后续的when都不再执行</span><br><span class="line">otherwise：所有的when都不成立时，才会执行</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;choose&gt;</span><br><span class="line">&lt;when test=&quot;userName!=null and userName.trim()!=&apos;&apos;&quot;&gt;and user_name like &apos;%&apos; #&#123;userName&#125; &apos;%&apos;&lt;/when&gt;</span><br><span class="line">&lt;when test=&quot;age != null&quot;&gt;and age = #&#123;age&#125;&lt;/when&gt;</span><br><span class="line">&lt;otherwise&gt;and user_name = &apos;zhangsan&apos; &lt;/otherwise&gt;</span><br><span class="line">&lt;/choose&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><ul><li>where<blockquote><p>条件选择,和if/choose配合使用,给sql拼接多个语句, 例如即输入了用户名也输入了年龄,全部拼接进SQL语句</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;queryUserListLikeUserNameAndAge&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">select * from tb_user</span><br><span class="line">&lt;!-- </span><br><span class="line">会在SQL语句中自动添加where关键字</span><br><span class="line">有一定的纠错功能：去掉sql语句块之前多余的一个and|or</span><br><span class="line">通常结合if或者choose使用</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;where&gt;</span><br><span class="line">&lt;if test=&quot;userName!=null and userName.trim()!=&apos;&apos;&quot;&gt;user_name like &apos;%&apos; #&#123;userName&#125; &apos;%&apos;&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;age!=null&quot;&gt;and age = #&#123;age&#125;&lt;/if&gt;</span><br><span class="line">&lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><ul><li>set<blockquote><p>更新信息,和if配合使用,当其中某个if不满足,则数据库不更新该字段,例如更新用户信息,sex=null</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=&quot;updateUserSelective&quot; &gt;</span><br><span class="line">UPDATE tb_user</span><br><span class="line">&lt;!-- </span><br><span class="line">会在SQL语句中自动添加set关键字</span><br><span class="line">也有一定的纠错功能：自动去掉sql语句块之后多余的一个逗号</span><br><span class="line">有关sex的if不通过,则数据库不更新sex的值</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;set&gt;</span><br><span class="line">&lt;if test=&quot;userName!=null and userName.trim()!=&apos;&apos;&quot;&gt;user_name = #&#123;userName&#125;,&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;password!=null and password.trim()!=&apos;&apos;&quot;&gt;password = #&#123;password&#125;,&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;name!=null and name.trim()!=&apos;&apos;&quot;&gt;name = #&#123;name&#125;,&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;age!=null&quot;&gt;age = #&#123;age&#125;,&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;sex!=null&quot;&gt;sex = #&#123;sex&#125;,&lt;/if&gt;</span><br><span class="line">updated = now(),</span><br><span class="line">&lt;/set&gt;</span><br><span class="line">WHERE</span><br><span class="line">(id = #&#123;id&#125;);</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure><ul><li>foreach<blockquote><p>当参数是集合/数组(集合底层是可变数组),进行遍历(突破参数只能是基本数据类型,HashMap,pojo)</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;queryUserListByIds&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">select * from tb_user where id in </span><br><span class="line">&lt;!-- </span><br><span class="line">foreach:遍历集合</span><br><span class="line">collection：接收的集合参数,接口文件中通过@param设定的参数名</span><br><span class="line">item：被遍历的集合中的一个元素</span><br><span class="line">separator:分隔符</span><br><span class="line">open:以什么开始(本例中,如果foreach已经被了&apos;()&apos;包围,则不用open和close</span><br><span class="line">close：以什么结束</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;foreach collection=&quot;ids&quot; item=&quot;id&quot; separator=&quot;,&quot; open=&quot;(&quot; close=&quot;)&quot;&gt;</span><br><span class="line">#&#123;id&#125;</span><br><span class="line">&lt;/foreach&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://curllen.uicp.io/2018/10/31/mybatis%E5%8A%A8%E6%80%81SQL/#disqus_thread</comments>
    </item>
    
    <item>
      <title>mybatis系列(一):mybatis动态代理</title>
      <link>http://curllen.uicp.io/2018/10/31/mybatis%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</link>
      <guid>http://curllen.uicp.io/2018/10/31/mybatis%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</guid>
      <pubDate>Wed, 31 Oct 2018 06:46:09 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;映射文件的配置参数中:parameterType参数都可以不写&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;默认规则&quot;&gt;&lt;a href=&quot;#默认规则&quot; class=&quot;headerlink&quot; title=&quot;默认规则&quot;&gt;&lt;/a&gt;默认规则&lt;/h2
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>映射文件的配置参数中:parameterType参数都可以不写</p></blockquote><h2 id="默认规则"><a href="#默认规则" class="headerlink" title="默认规则"></a>默认规则</h2><ul><li>dao接口名称通常命名为XxxMapper.</li><li>映射文件:Xxxmapper.xml, statementid与接口的方法名保持一致.<h2 id="mybatis-config-xml配置-以下按该顺序写"><a href="#mybatis-config-xml配置-以下按该顺序写" class="headerlink" title="mybatis-config.xml配置(以下按该顺序写)"></a>mybatis-config.xml配置(以下按该顺序写)</h2></li></ul><ol><li>导入jdbc配置文件(使用$):<blockquote><p><code>&lt;properties resource=&quot;jdbc.properties&quot;&gt;&lt;/properties&gt;</code></p></blockquote></li><li>开启驼峰匹配：经典的数据库列名（多个单词下划线连接）映射到经典的java属性名(多个单词驼峰连接)<blockquote><p><code>&lt;settings&gt;&lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt;&lt;/settings&gt;</code></p></blockquote></li><li>在映射文件中的参数使用别名(就可不用全路径,但开启了也可以全路径),方式2种,只写一种<blockquote><p><code>&lt;typeAliases&gt;</code><br><br><code>//自动将类名转换为别名,大小写不敏感</code><br><br><code>&lt;package name=&quot;包名&quot;&gt;</code><br><br><code>&lt;/typeAliases&gt;</code></p></blockquote></li><li>environments,可以配置多个environment(环境),选中环境的方式<blockquote><p>①<code>&lt;environments default=&quot;环境id名&quot;&gt;...&lt;environments&gt;</code></p></blockquote></li></ol><blockquote><p>②<code>SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader,&quot;环境id名&quot;);</code></p><ol start="5"><li>映入映射文件4种,只写一种<br><code>&lt;mappers&gt;</code><br><br><code>&lt;mapper resource=&quot;映射文件名&quot;&gt;</code><br><br><code>&lt;/mappers&gt;</code></li></ol></blockquote><h2 id="映射文件Xxxmapper-xml"><a href="#映射文件Xxxmapper-xml" class="headerlink" title="映射文件Xxxmapper.xml"></a>映射文件Xxxmapper.xml</h2><ol><li>将id回写到user对象<blockquote><p><code>useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot; keyColumn=&quot;id&quot;</code></p></blockquote></li><li>接收参数方式(两种)<blockquote><p>①${}:非预编译,直接拼接,不能防止sql注入,通常用于表名,<br>注意,如果sql语句中只用了一个参数,且接口文件没有使用@param注解,则只能固定使用${value}获取参数的值;</p></blockquote></li></ol><blockquote><p>②#{}:预编译,只是表示占位，与参数的名字无关，如果只有一个参数，可以使用#{任意参数名}接收参数值，会自动对应</p></blockquote><p>获取多个参数</p><blockquote><p>${}:接口使用@param注解</p></blockquote><blockquote><p>#{}:默认规则{0,1,param1,param2},即可以#{0} #{1},或者#{param1} #{param2}; 使用#param注解</p></blockquote><blockquote><p>如果在接口文件中使用了@param注释,则如果参数是pojo或者HashMap,则需要#{参数名.属性名}/${参数名.属性名}</p></blockquote><blockquote><p>${}/#{}在使用过程中空格对其的影响, 例如当其为like等的一部分参数,需要在%前后加空格,如’%’ ${} ‘%’,==什么时候加空格?==&gt;&gt;当${}/#{}和其他符号组合成为某个关键字的一个参数时,需要加.(课上说的就是%,具体待验证)</p></blockquote>]]></content:encoded>
      
      <comments>http://curllen.uicp.io/2018/10/31/mybatis%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/#disqus_thread</comments>
    </item>
    
    <item>
      <title>IDEA打包类为Jar</title>
      <link>http://curllen.uicp.io/2018/10/16/IDEA%E6%89%93%E5%8C%85%E7%B1%BB%E4%B8%BAJar/</link>
      <guid>http://curllen.uicp.io/2018/10/16/IDEA%E6%89%93%E5%8C%85%E7%B1%BB%E4%B8%BAJar/</guid>
      <pubDate>Tue, 16 Oct 2018 12:54:36 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;code&gt;有的时候需要把自己写工具打包成jar包,供自己或者他人使用.&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;情况分为两类&quot;&gt;&lt;a href=&quot;#情况分为两类&quot; class=&quot;headerlink&quot; title=&quot;情况分为两类:&quot;&gt;&lt;/a&gt;情况分为两类:&lt;/h1&gt;&lt;blo
        
      
      </description>
      
      <content:encoded><![CDATA[<p><code>有的时候需要把自己写工具打包成jar包,供自己或者他人使用.</code></p><h1 id="情况分为两类"><a href="#情况分为两类" class="headerlink" title="情况分为两类:"></a>情况分为两类:</h1><blockquote><p>1.自己的工具类没有导入(引用)第三方jar包;</p></blockquote><blockquote><p>2.自己的工具类引用了第三方jar包.</p></blockquote><hr><h2 id="第一类的处理"><a href="#第一类的处理" class="headerlink" title="第一类的处理"></a>第一类的处理</h2><ul><li>对于情况1的处理步骤(以下情况适应一次打包多个文件):<ul><li>如图, 例如打包实体类中的Book.java<br><br><img src="/2018/10/16/IDEA打包类为Jar/01.png" alt="image"><br></li><li>打开File -&gt; Project Structure -&gt; Artifacts -&gt; + -&gt; JAR -&gt; Empty<br><br><img src="/2018/10/16/IDEA打包类为Jar/02.png" alt="image"></li><li>在Output Layout中,依次建立文件夹,文件夹名字和结构和Book.java所在的路径保持一致<br><img src="/2018/10/16/IDEA打包类为Jar/03.png" alt="image"><br></li><li>在Output Layout中,点击 + -&gt;file, 添加Book.Class文件<br><img src="/2018/10/16/IDEA打包类为Jar/04.png" alt="image"><br><br><img src="/2018/10/16/IDEA打包类为Jar/05.png" alt="image"></li><li>点击 Apply ,再点击 Create Manifest创建配置文MANIFEST.MF,该文件可以定为工程中任意目录下,完成配置<br><br><img src="/2018/10/16/IDEA打包类为Jar/06.png" alt="image"><br><img src="/2018/10/16/IDEA打包类为Jar/07.png" alt="image"></li><li>回到IDEA，选择Build -&gt; Build Artifacts，成功生成Jar包。生成的Jar包位于上图设置的Output directory</li></ul></li></ul><hr><h2 id="第二类的处理"><a href="#第二类的处理" class="headerlink" title="第二类的处理"></a>第二类的处理</h2><ul><li>对于情况2的处理,可以使用方式1,但是在其他项目中导入自己的jar包后, 也得把自己jar包所依赖的第三方jar包也导入该工程,否者无效,方式1中网上的通过Class-Path设置第三方jar包位置是不可用的,第二种方式如下:<ul><li>如图, 例如打包实体类中的BeanCommonUtils.java,该类依赖第三方jar包commons-beanutils-1.9.3.jar <br></li><li>打开File -&gt; Project Structure -&gt; Artifacts -&gt; + -&gt; JAR -&gt; From modules with dependencies<br><br><img src="/2018/10/16/IDEA打包类为Jar/08.png" alt="image"><br><img src="/2018/10/16/IDEA打包类为Jar/09.png" alt="image"></li><li>上图出现的相关参数说明如下:<ul><li>module是你需要打成jar包的项目</li><li>MainClass是运行的主函数，如果不需要运行则可以不选择</li><li>jar files from libraries是项目打包的方式，下面选项大致的含义：<ol><li>extract to the target jar：把所有文件倒入进一个jar包里</li><li>copy to the。。。。：把项目的依赖包导出和项目一个目录，通过MANIFEST.MF文件来引用jar包。</li></ol></li></ul></li><li>回到IDEA，选择Build -&gt; Build Artifacts，成功生成Jar包。生成的Jar包位于上图设置的Output directory</li></ul></li></ul><blockquote><p>这里如果你的项目需要打成一个可运行的jar包推荐第二种，反之第一种。<br>另,未验证:如果项目中引用的Jar包有签名过，最后打包成的Jar包运行时会抛出错误：<br><code>java.lang.SecurityException: Invalid signature file digest for Manifest main attributes</code></p></blockquote><blockquote><p>From modules with dependencies，==会把在项目中用到的Jar包解压开==，当成项目的一部分，打包到最后的Jar包中，这样就不会出现采用方式1时，通过网上说的使用Class-Path方式设置第三方jar包位置时导致出现的找不到类异常。</p></blockquote><blockquote><p>==该方式只适合于该工程所有类都需要被打包到该jar包中的情况!==</p></blockquote><blockquote><p>==生成的jar中会有该工程lib文件夹下的第三方jar包, 这些jar已不产生作用, 可以删除!==</p></blockquote><p>​    </p>]]></content:encoded>
      
      <comments>http://curllen.uicp.io/2018/10/16/IDEA%E6%89%93%E5%8C%85%E7%B1%BB%E4%B8%BAJar/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
